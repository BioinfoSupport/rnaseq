#!/usr/bin/env Rscript


#-#-#-#-#-#-#-#-#-#-#-#-#
# Argument parsing
#-#-#-#-#-#-#-#-#-#-#-#-#
library(optparse)
option_list <- list(
		make_option("--fasta", help="Path to assembly.fasta file generated by FLYE [required]"),
		make_option("--flyeinfo", help="Path to assembly_info.txt file generated by FLYE"),		
		make_option("--sub-pattern", help="Regexp pattern to find [%default]",default="^contig_([0-9]+)$"),
		make_option("--sub-replacement", help="Replacement string [%default]",default="c\\1"),
		make_option("--prefix", help="An optional prefix to add in front of each contig name [%default]",default=""),
		make_option("--organism", help="Set organism"),
		#make_option("--detect-plasmid",help="set [plasmid-name=unnamed] if [topology=circular] and sequence length <400kb",type = "store_true",default = FALSE),
    make_option("--out", help="Name of the output FASTA file [required]")
)
# -  
opt <- parse_args(OptionParser(description="Change headers lines in a FASTA file",option_list=option_list))
if (is.null(opt$fasta)) stop("missing --fasta argument")
if (is.null(opt$out)) stop("missing --out argument")



#-#-#-#-#-#-#-#-#-#-#-#-#
# Script
#-#-#-#-#-#-#-#-#-#-#-#-#
suppressPackageStartupMessages({
  library(Biostrings)
	library(stringr)
})


# Read FLYE info file
read_flye_info <- function(f) {
	read.table(
		f,sep="\t",header=FALSE,
		col.names=c("contig_id","length","coverage","is_circular","is_repetitive","multiplicity","alternative_group","graph_path")
	)
}



# Read FASTA
dna <- readDNAStringSet(opt$fasta)

# Read info file and parse
if (!is.null(opt$flyeinfo)) {
	info <- read_flye_info(opt$flyeinfo) |>
		mutate(topology = case_when(
			is_circular=="Y" ~ "circular",
			TRUE ~ "linear"
		))
	testthat::expect_setequal(names(dna),info$contig_id)
	names(dna) <- str_glue("{names(dna)} [topology={info$topology}] [flye_coverage={info$coverage}] [flye_repetitive={info$is_repetitive}]")
}

# Apply regex sub-rule
names(dna) <- sub(opt$"sub-pattern",opt$"sub-replacement",names(dna))

# Add prefix
names(dna) <- str_glue("{opt$prefix}names(dna)}")

# Add organism field
if (!is.null(opt$organism)) {
	pat <- "\\[ *organism *= *([^\\]]+)\\] *"
	names(pat) <- sub(pat,"",names(pat)) # delete existing field
	names(dna) <- str_glue("{names(dna)} [organism={opt$organism}]") # add new field
}


# Output new FASTA
writeXStringSet(dna,opt$out)




