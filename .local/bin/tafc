#!/usr/bin/env Rscript



#-#-#-#-#-#-#-#-#-#-#-#-#
# Argument parsing
#-#-#-#-#-#-#-#-#-#-#-#-#

library(optparse)

option_list <- list( 
	make_option("--fa",help="Path to the Fasta file [required] ",type="character"),
	make_option("--out",help="Name of the txt file to generate [required] ",type="character")
)
opt <- parse_args(OptionParser(
	option_list = option_list,
	usage = "usage: %prog --out <out.fc> --fa <genome.fasta> <bam-file>",
	description = "Count number of read at each TA site found in the FASTA."
	),positional_arguments = 1)
if (is.null(opt$options$fa) || is.null(opt$options$out)) stop("--fa and --out arguments are required")
if (!file.exists(opt$options$fa)) stop("cannot find --fa file")




#-#-#-#-#-#-#-#-#-#-#-#-#
# Methods definitions
#-#-#-#-#-#-#-#-#-#-#-#-#
suppressPackageStartupMessages({
	BiocParallel::register(BiocParallel::MulticoreParam(workers=2))
	library(GenomicAlignments)
	library(GenomicFeatures)
	library(tidyverse)
})



#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Main
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

fa <- getSeq(FaFile(opt$option$fa))
names(fa) <- sub(" .*","",names(fa))
bam <- BamFile(opt$args,yieldSize = 1000000)

ta <- GRanges(vmatchPattern("TA",fa))

rev <- summarizeOverlaps(
  ta,bam,
  preprocess.reads = function(reads){
    resize(granges(reads),2)
  },
  param = ScanBamParam(flag = scanBamFlag(isMinusStrand = TRUE)),
  inter.feature = FALSE,
  mode = "IntersectionStrict")

fwd <- summarizeOverlaps(
  ta,bam,
  preprocess.reads = function(reads){
    resize(granges(reads),2)
  },
  param = ScanBamParam(flag = scanBamFlag(isMinusStrand = FALSE)),
  inter.feature = FALSE,
  mode = "IntersectionStrict")

all <- data.frame(
  pos=as.character(granges(fwd)),
  fwd=as.vector(assay(fwd)),
  rev=as.vector(assay(rev)))

write.table(all,sep="\t",row.names = FALSE,file=opt$options$out)
