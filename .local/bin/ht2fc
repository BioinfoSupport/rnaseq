#!/usr/bin/env Rscript



#-#-#-#-#-#-#-#-#-#-#-#-#
# Argument parsing
#-#-#-#-#-#-#-#-#-#-#-#-#
library(optparse)
option_list <- list( 
	make_option("--gtf",help="Path to the GTF file [required]. The GTF must contains 'gene' and 'exon' features, with 'gene_id' properly set on each.",type="character"),
	make_option("--out",help="Name of the txt file to generate [required]",type="character")
)
opt <- parse_args(OptionParser(
	option_list = option_list,
	usage = "usage: %prog --out <out.fc> --gtf <in.gtf> <bam-file>",
	description = "Perform feature counting on a given BAM file for a given GTF annotation."
	),positional_arguments = 1)
if (is.null(opt$options$gtf) || is.null(opt$options$out)) stop("--gtf and --out arguments are required")
if (!file.exists(opt$options$gtf)) stop("cannot find --gtf file")




#-#-#-#-#-#-#-#-#-#-#-#-#
# Methods definitions
#-#-#-#-#-#-#-#-#-#-#-#-#
suppressPackageStartupMessages({
	BiocParallel::register(BiocParallel::MulticoreParam(workers=2))
	library(GenomicAlignments)
	library(GenomicFeatures)
	library(tidyverse)
})

# General purpose read quantification
# The GTF must have meta-columns gene_id and type
# And type must contains "exon" and "gene" features
gtf_features <- function(gtf,exon_types=c("exon","CDS"),gene_types="gene") {

	features <- List(
		chrom_chromosomicU = GRanges(seqinfo(gtf)) %>% splitAsList(.,seqnames(.)),
		
		chrom_genomicU = gtf[gtf$type %in% gene_types] %>%
			unstrand() %>% 
			splitAsList(.,seqnames(.)) %>%
			GenomicRanges::reduce(),
		chrom_genomicS = gtf[gtf$type %in% gene_types] %>%
			splitAsList(.,seqnames(.)) %>%
			GenomicRanges::reduce(),
		chrom_genomicA = gtf[gtf$type %in% gene_types] %>%
			invertStrand() %>%
			splitAsList(.,seqnames(.)) %>%
			GenomicRanges::reduce(),
		
		chrom_exonicU = gtf[gtf$type %in% exon_types] %>%
			unstrand() %>% 
			splitAsList(.,seqnames(.)) %>%
			GenomicRanges::reduce(),
		chrom_exonicS = gtf[gtf$type %in% exon_types] %>%
			splitAsList(.,seqnames(.)) %>%
			GenomicRanges::reduce(),
		chrom_exonicA = gtf[gtf$type %in% exon_types] %>%
			invertStrand() %>% 
			splitAsList(.,seqnames(.)) %>%
			GenomicRanges::reduce(),

		gene_genomicU = gtf[gtf$type %in% gene_types] %>%
			unstrand() %>%
			splitAsList(.,.$gene_id) %>%
			GenomicRanges::reduce(),
		gene_genomicS = gtf[gtf$type %in% gene_types] %>%
			splitAsList(.,.$gene_id) %>%
			GenomicRanges::reduce(),
		gene_genomicA = gtf[gtf$type %in% gene_types] %>%
			invertStrand() %>%
			splitAsList(.,.$gene_id) %>%
			GenomicRanges::reduce(),
		
		gene_exonicU = gtf[gtf$type %in% exon_types] %>%
			unstrand() %>%
			splitAsList(.,.$gene_id) %>%
			GenomicRanges::reduce(),
		gene_exonicS = gtf[gtf$type %in% exon_types] %>%
			splitAsList(.,.$gene_id) %>%
			GenomicRanges::reduce(),
		gene_exonicA = gtf[gtf$type %in% exon_types] %>%
			invertStrand() %>%
			splitAsList(.,.$gene_id) %>%
			GenomicRanges::reduce()
	)
	unlist(features,recursive=FALSE)
}



#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Main
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
bf <- BamFile(opt$args,yieldSize = 5000000,asMates = FALSE)
suppressWarnings(
	gtf <- rtracklayer::import.gff2(opt$options$gtf,genome=seqinfo(bf))
)


# Count reads in all features in a single pass on BAM
x <- summarizeOverlaps(
	features = gtf_features(gtf),
	reads = bf,
	mode = Union,
	inter.feature = FALSE,
	ignore.strand = FALSE,
	param = ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE,isSecondaryAlignment = FALSE))
)

pat <- "^([^_]*)_([^\\.]*)\\.(.*)$"
tibble(feature=rownames(x),feature_size=sum(width(rowRanges(x))),count=assay(x,"counts")[,1],row.names = NULL) %>%
	mutate(feature_type = sub(pat,"\\1",feature)) %>%
	mutate(count_type = sub(pat,"\\2",feature)) %>%
	mutate(feature_id = sub(pat,"\\3",feature)) %>%
	select(feature_type,feature_id,feature_size,count_type,count) %>%
	write.table(sep="\t",row.names = FALSE,file=opt$options$out)



